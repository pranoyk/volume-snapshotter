/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/pranoyk/volume-snapshotter/pkg/apis/pranoykundu.dev/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnapshotActionLister helps list SnapshotActions.
// All objects returned here must be treated as read-only.
type SnapshotActionLister interface {
	// List lists all SnapshotActions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotAction, err error)
	// SnapshotActions returns an object that can list and get SnapshotActions.
	SnapshotActions(namespace string) SnapshotActionNamespaceLister
	SnapshotActionListerExpansion
}

// snapshotActionLister implements the SnapshotActionLister interface.
type snapshotActionLister struct {
	indexer cache.Indexer
}

// NewSnapshotActionLister returns a new SnapshotActionLister.
func NewSnapshotActionLister(indexer cache.Indexer) SnapshotActionLister {
	return &snapshotActionLister{indexer: indexer}
}

// List lists all SnapshotActions in the indexer.
func (s *snapshotActionLister) List(selector labels.Selector) (ret []*v1.SnapshotAction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotAction))
	})
	return ret, err
}

// SnapshotActions returns an object that can list and get SnapshotActions.
func (s *snapshotActionLister) SnapshotActions(namespace string) SnapshotActionNamespaceLister {
	return snapshotActionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotActionNamespaceLister helps list and get SnapshotActions.
// All objects returned here must be treated as read-only.
type SnapshotActionNamespaceLister interface {
	// List lists all SnapshotActions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotAction, err error)
	// Get retrieves the SnapshotAction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SnapshotAction, error)
	SnapshotActionNamespaceListerExpansion
}

// snapshotActionNamespaceLister implements the SnapshotActionNamespaceLister
// interface.
type snapshotActionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotActions in the indexer for a given namespace.
func (s snapshotActionNamespaceLister) List(selector labels.Selector) (ret []*v1.SnapshotAction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotAction))
	})
	return ret, err
}

// Get retrieves the SnapshotAction from the indexer for a given namespace and name.
func (s snapshotActionNamespaceLister) Get(name string) (*v1.SnapshotAction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snapshotaction"), name)
	}
	return obj.(*v1.SnapshotAction), nil
}
