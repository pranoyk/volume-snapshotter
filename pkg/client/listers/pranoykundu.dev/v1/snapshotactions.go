/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/pranoyk/volume-snapshotter/pkg/apis/pranoykundu.dev/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnapshotActionsLister helps list SnapshotActionses.
// All objects returned here must be treated as read-only.
type SnapshotActionsLister interface {
	// List lists all SnapshotActionses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotActions, err error)
	// SnapshotActionses returns an object that can list and get SnapshotActionses.
	SnapshotActionses(namespace string) SnapshotActionsNamespaceLister
	SnapshotActionsListerExpansion
}

// snapshotActionsLister implements the SnapshotActionsLister interface.
type snapshotActionsLister struct {
	indexer cache.Indexer
}

// NewSnapshotActionsLister returns a new SnapshotActionsLister.
func NewSnapshotActionsLister(indexer cache.Indexer) SnapshotActionsLister {
	return &snapshotActionsLister{indexer: indexer}
}

// List lists all SnapshotActionses in the indexer.
func (s *snapshotActionsLister) List(selector labels.Selector) (ret []*v1.SnapshotActions, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotActions))
	})
	return ret, err
}

// SnapshotActionses returns an object that can list and get SnapshotActionses.
func (s *snapshotActionsLister) SnapshotActionses(namespace string) SnapshotActionsNamespaceLister {
	return snapshotActionsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotActionsNamespaceLister helps list and get SnapshotActionses.
// All objects returned here must be treated as read-only.
type SnapshotActionsNamespaceLister interface {
	// List lists all SnapshotActionses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotActions, err error)
	// Get retrieves the SnapshotActions from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SnapshotActions, error)
	SnapshotActionsNamespaceListerExpansion
}

// snapshotActionsNamespaceLister implements the SnapshotActionsNamespaceLister
// interface.
type snapshotActionsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotActionses in the indexer for a given namespace.
func (s snapshotActionsNamespaceLister) List(selector labels.Selector) (ret []*v1.SnapshotActions, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotActions))
	})
	return ret, err
}

// Get retrieves the SnapshotActions from the indexer for a given namespace and name.
func (s snapshotActionsNamespaceLister) Get(name string) (*v1.SnapshotActions, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snapshotactions"), name)
	}
	return obj.(*v1.SnapshotActions), nil
}
